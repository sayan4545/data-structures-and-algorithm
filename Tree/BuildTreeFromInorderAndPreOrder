public class BuildTreeFromInorderAndPreOrder{
    public static void main(String[] args){
        

    }
    public Node buildTreeFromInAndPre(int[] preOrder, int[] inOrder){
        int[] preIndex = {0};
        
        return build(preOrder,inOrder,preIndex,0,inOrder.length-1);

    }
    public Node build(int[] preOrder, int[] inOrder, int[] preIndex, int startIndex, int endIndex){
        // base condition
        if(preIndex[0] >preOrder.length || startIndex > endIndex || inOrder.length!= preOrder.length){
            return null;
        }

        //Node is the first of the pre order
        int element = preOrder[preIndex++];
        // find position of the element in the inorder
        int position = findPosition(inOrder, element);
        // create the root node
        Node root = new Node(element);

        // left subtree
        root.left = build(preOrder,inOrder,preIndex,startIndex,position-1);
        // right subtree
        root.right = build(preOrder,inOrder,preIndex,position+1,inOrder.length-1);
        return root;
    }
    public Node build2(int[] postOrder, int[] inOrder, int[] postIndex, int startIndex, int endIndex){
        if(postIndex[0] < 0 || startIndex > endIndex || postOrder.length != inOrder.length){
            return null;
        }
        int element = postOrder[postIndex[0]--];
        int position = findPosition(inOrder, element);
        Node root = new Node(element);
        //right subtree
        root.right = build2(postOrder,inOrder,postIndex,position+1,endIndex);
        root.left = build2(postOrder,inOrder,postIndex,startIndex,position-1);
        return root;
    }
    public static int findPosition(int[] array, int k){
        for(int i = 0;i<array.length;i++){
            if(array[i] == k){
                return i;
            }
        }
        return -1;
    }
}
class Node{
    int val;
    Node left;
    Node right;
    public Node(int val){
        this.val = val;
        this.left = null;
        this.right = null;
    }
}